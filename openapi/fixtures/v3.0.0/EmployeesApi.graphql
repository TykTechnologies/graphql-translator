schema {
    query: Query
    mutation: Mutation
}

type Query {
    """
    Get all employee details
    Uses the getEmployees Db2 z/OS asset
    """
    employeesGet(department: Department, job: Job): [EmployeeBodyFormatted]
    """
    Get an employee
    Uses the getEmployee Db2 z/OS asset
    """
    employeesIdGet(id: String!): EmployeeBody
}

type Mutation {
    """
    Delete an employee
    Uses the deleteEmployee Db2 z/OS asset
    """
    employeesIdDelete(id: String!): EmployeeNumber
    """
    Update an employee
    Uses the updateEmployee Db2 z/OS asset
    """
    employeesIdPut(employeeBodyInput: EmployeeBodyInput, id: String!): EmployeeBody
    """
    Add an employee
    Uses the addEmployee Db2 z/OS asset
    """
    employeesPost(employeeBodyInput: EmployeeBodyInput): EmployeeBody
}

enum Department {
    A_00
    B_01
    C_01
    E_01
    D_11
    D_21
    E_11
    E_21
}

type EmployeeBody {
    bonus: Float
    commission: Float
    dateOfBirth: String
    department: String
    educationLevel: Int
    employeeNumber: String
    firstName: String
    hireDate: String
    job: String
    lastName: String
    middleInitial: String
    phoneNumber: String
    salary: Float
    sex: String
}

type EmployeeBodyFormatted {
    personal: EmployeePersonalDetails
    summary: EmployeeSummary
    work: EmployeeWorkDetails
}

input EmployeeBodyInput {
    bonus: Float
    commission: Float
    dateOfBirth: String
    department: String
    educationLevel: Int
    employeeNumber: String
    firstName: String
    hireDate: String
    job: String
    lastName: String
    middleInitial: String
    phoneNumber: String
    salary: Float
    sex: String
}

type EmployeeNumber {
    message: String
}

type EmployeePersonalDetails {
    dateOfBirth: String
    firstName: String
    lastName: String
    middleInitial: String
    sex: String
}

type EmployeeSummary {
    bio: String
}

type EmployeeWorkDetails {
    department: String
    educationLevel: Int
    employeeNumber: String
    hireDate: String
    job: String
    pay: EmployeeWorkPay
    phoneNumber: String
}

type EmployeeWorkPay {
    bonus: Float
    commission: Float
    salary: Float
}

enum Job {
    FIELDREP
    OPERATOR
    CLERK
    DESIGNER
    ANALYST
    SALESREP
    MANAGER
    PRES
}